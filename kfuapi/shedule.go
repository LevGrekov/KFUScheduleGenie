package kfuapi

import (
	"fmt"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"
)

func (c *Client) GetSchedule(employeeID int) (string, error) {
	subjects, err := c.getTeacherSubjects(employeeID)
	if err != nil {
		return "", err
	}
	return formatTeacherSchedule(subjects), nil
}

func (c *Client) getTeacherSubjects(employeeID int) ([]Subject, error) {
	apiUrl := fmt.Sprintf("%s/employees/%d/schedule", baseURL, employeeID)

	req, err := http.NewRequest(http.MethodGet, apiUrl, nil)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	var resp ScheduleResponse
	if err := c.doRequest(req, &resp); err != nil {
		return nil, err
	}

	if !resp.Success {
		return nil, fmt.Errorf("–∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è")
	}

	return resp.Subjects, nil
}

func formatTeacherSchedule(subjects []Subject) string {
	if len(subjects) == 0 {
		return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	teacher := subjects[0]
	teacherName := fmt.Sprintf("%s %s %s ",
		teacher.TeacherLastname,
		teacher.TeacherFirstname,
		teacher.TeacherMiddlename)

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: %s\n\n", teacherName))

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
	schedule := make(map[int]map[string][]Subject)
	for _, subj := range subjects {
		if schedule[subj.DayWeekSchedule] == nil {
			schedule[subj.DayWeekSchedule] = make(map[string][]Subject)
		}
		timeSlot := fmt.Sprintf("%s-%s", subj.BeginTimeSchedule, subj.EndTimeSchedule)
		schedule[subj.DayWeekSchedule][timeSlot] = append(schedule[subj.DayWeekSchedule][timeSlot], subj)
	}

	// –í—ã–≤–æ–¥–∏–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
	for day := 1; day <= 7; day++ {
		if timeSlots, ok := schedule[day]; ok {
			sb.WriteString(fmt.Sprintf("üìå %s:\n", weekdayName(day)))

			// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
			var times []string
			for time := range timeSlots {
				times = append(times, time)
			}
			sort.Strings(times)

			for _, time := range times {
				subs := timeSlots[time]
				if len(subs) == 0 {
					continue
				}

				// –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã (–æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
				subj := subs[0]

				// –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
				timeInfo := fmt.Sprintf("üïí %s", time)
				weekType := ""
				if subj.TypeWeekSchedule == 1 {
					weekType = " (–Ω–µ—á.)"
				} else if subj.TypeWeekSchedule == 2 {
					weekType = " (—á–µ—Ç.)"
				}
				period := formatPeriod(subj.StartDaySchedule, subj.FinishDaySchedule)
				sb.WriteString(timeInfo + weekType + period + " ")

				// –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
				subjectInfo := fmt.Sprintf("üìö %s", subj.SubjectName)
				if subj.SubjectKindName != "" {
					subjectInfo += fmt.Sprintf(" (%s)", subj.SubjectKindName)
				}
				sb.WriteString(subjectInfo + " ")

				// –ì—Ä—É–ø–ø—ã
				groupsInfo := fmt.Sprintf("üë• %s", formatGroupList(subj.GroupList))
				sb.WriteString(groupsInfo + " ;")

				// –ê—É–¥–∏—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
				auditoryInfo := formatAuditory(subj.BuildingName, subj.NumAuditorium)
				if auditoryInfo != "" {
					sb.WriteString(auditoryInfo + " ")
				}

				if subj.NoteSchedule != "" {
					noteInfo := fmt.Sprintf("üìù %s", subj.NoteSchedule)
					sb.WriteString(noteInfo + " ")
				}
				sb.WriteString("\n")
			}
			sb.WriteString("\n")
		}
	}

	return sb.String()
}

func weekdayName(day int) string {
	days := []string{"", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
	if day >= 1 && day <= 7 {
		return days[day]
	}
	return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å"
}

func formatPeriod(start, end string) string {
	if start == "" || end == "" {
		return ""
	}
	startDate, err1 := time.Parse("02.01.06", start)
	endDate, err2 := time.Parse("02.01.06", end)
	if err1 != nil || err2 != nil {
		return ""
	}
	return fmt.Sprintf(" (%s-%s)", startDate.Format("02.01"), endDate.Format("02.01"))
}

func formatAuditory(building, room string) string {
	result := building
	if room != "" {
		result += fmt.Sprintf(", –∞—É–¥. %s", room)
	}
	return result
}

func formatGroupList(groups string) string {
	if groups == "" {
		return ""
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
	groupItems := strings.Split(groups, ", ")
	if len(groupItems) == 0 {
		return groups
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
	sort.Strings(groupItems)

	var result []string
	var currentPrefix string
	var startNum, prevNum int

	for i, group := range groupItems {
		// –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä "11" –∏ "400")
		parts := strings.Split(group, "-")
		if len(parts) != 2 {
			// –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "XX-XXX", –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
			result = append(result, group)
			continue
		}

		prefix := parts[0]
		num, err := strconv.Atoi(parts[1])
		if err != nil {
			result = append(result, group)
			continue
		}

		if i == 0 {
			// –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –≤ —Å–ø–∏—Å–∫–µ
			currentPrefix = prefix
			startNum = num
			prevNum = num
			continue
		}

		if prefix == currentPrefix && num == prevNum+1 {
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
			prevNum = num
		} else {
			// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
			if startNum == prevNum {
				result = append(result, fmt.Sprintf("%s-%d", currentPrefix, startNum))
			} else {
				result = append(result, fmt.Sprintf("%s-%d..%d", currentPrefix, startNum, prevNum))
			}
			// –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
			currentPrefix = prefix
			startNum = num
			prevNum = num
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	if currentPrefix != "" {
		if startNum == prevNum {
			result = append(result, fmt.Sprintf("%s-%d", currentPrefix, startNum))
		} else {
			result = append(result, fmt.Sprintf("%s-%d..%d", currentPrefix, startNum, prevNum))
		}
	}

	return strings.Join(result, ", ")
}
