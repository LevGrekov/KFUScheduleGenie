package newparser

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/PuerkitoBio/goquery"
	"golang.org/x/net/html/charset"
)

func ParseSchedule(id int) (string, error) {
	url := fmt.Sprintf("https://kpfu.ru/main?p_id=%d&p_type=8&p_from=1", id)

	resp, err := http.Get(url)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %s", resp.Status)
	}

	utf8Reader, err := charset.NewReader(resp.Body, resp.Header.Get("Content-Type"))
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É: %w", err)
	}

	html_schedule, err := io.ReadAll(utf8Reader)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	formatted, err := formatScheduleForTelegram(string(html_schedule))
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: %v", err)
	}

	return formatted, nil

}

func formatScheduleForTelegram(html string) (string, error) {
	doc, err := goquery.NewDocumentFromReader(strings.NewReader(html))
	if err != nil {
		return "–û—à–∏–±–∫–∞ –±–ª–∏–Ω—Å", err
	}

	var builder strings.Builder

	name := doc.Find(".menu_header").Text()
	if name == "" {
		return "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", nil
	}
	builder.WriteString(fmt.Sprintf("üìÖ %s\n\n", strings.TrimSpace(name)))

	doc.Find("div[style*='background-image']").Each(func(i int, dayDiv *goquery.Selection) {
		day := strings.TrimSpace(dayDiv.Text())
		builder.WriteString(fmt.Sprintf("<b>üìå %s</b>\n", day))

		table := dayDiv.NextFiltered("table")
		table.Find("tr").Each(func(j int, row *goquery.Selection) {
			time := strings.TrimSpace(row.Find("td").First().Text())
			subject := strings.TrimSpace(row.Find("td").Last().Text())

			builder.WriteString(fmt.Sprintf("‚è∞ %s - %s\n", time, subject))
		})
		builder.WriteString("\n")
	})

	return builder.String(), nil
}
