package parser

import (
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
	"golang.org/x/net/html/charset"
)

const (
	baseURL                = "https://kpfu.ru"
	userAgent              = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
	timeout                = 10 * time.Second
	schedule_link_selector = "#ss_content > div > div > div:nth-child(2) > div.right_width.right_block > ul > li:nth-child(7) > a"
	schedule_selector      = "#ss_content > div > div > div:nth-child(2) > div.left_width > div"
)

func ParseSchedule(name string, secondname string) (string, error) {

	// 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
	initialPage, err := fetchPage(baseURL + "/" + name + "." + secondname)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %v", err)
	}

	// 2. –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	scheduleLink, err := findScheduleLink(initialPage)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: %v", err)
	}

	// 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
	schedulePage, err := fetchPage(scheduleLink)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %v", err)
	}

	// 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–π –±–ª–æ–∫ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
	scheduleHTML, err := extractSchedule(schedulePage)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %v", err)
	}

	// 5. –ü–∞—Ä—Å–∏–º HTML –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è Telegram —Ñ–æ—Ä–º–∞—Ç
	formattedSchedule, err := formatScheduleForTelegram(scheduleHTML)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %v", err)
	}

	return formattedSchedule, nil
}

func formatScheduleForTelegram(html string) (string, error) {
	doc, err := goquery.NewDocumentFromReader(strings.NewReader(html))
	if err != nil {
		return "", err
	}

	var builder strings.Builder

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
	name := doc.Find(".menu_header").Text()
	if name != "" {
		builder.WriteString(fmt.Sprintf("üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è %s*\n\n", strings.TrimSpace(name)))
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
	doc.Find("div[style*='background-image']").Each(func(i int, dayDiv *goquery.Selection) {
		day := strings.TrimSpace(dayDiv.Text())
		builder.WriteString(fmt.Sprintf("üìå *%s*\n", day))

		// –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ div
		table := dayDiv.NextFiltered("table")
		table.Find("tr").Each(func(j int, row *goquery.Selection) {
			time := strings.TrimSpace(row.Find("td").First().Text())
			subject := strings.TrimSpace(row.Find("td").Last().Text())

			// –£–ø—Ä–æ—â–∞–µ–º —Ç–µ–∫—Å—Ç
			subject = cleanSubjectText(subject)

			builder.WriteString(fmt.Sprintf("‚è∞ %s - %s\n", time, subject))
		})
		builder.WriteString("\n")
	})

	return builder.String(), nil
}

func cleanSubjectText(text string) string {
	// –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –∏ —É–ø—Ä–æ—â–∞–µ–º —Ç–µ–∫—Å—Ç
	replacements := map[string]string{
		"–£—á–µ–±–Ω–æ–µ –∑–¥–∞–Ω–∏–µ ‚Ññ14": "",
		"(–≥—Ä.":               "–≥—Ä.",
		"–Ω–µ—á. –Ω–µ–¥.":          "(–Ω–µ—á.)",
		"—á–µ—Ç. –Ω–µ–¥.":          "(—á–µ—Ç.)",
		"  ":                 " ", // –£–¥–∞–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
	}

	for old, new := range replacements {
		text = strings.ReplaceAll(text, old, new)
	}

	return strings.TrimSpace(text)
}

func fetchPage(url string) (*goquery.Document, error) {
	client := &http.Client{
		Timeout: 10 * time.Second,
	}

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ —É –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
	req.Header.Set("User-Agent", userAgent)
	req.Header.Set("Accept-Language", "ru-RU,ru;q=0.9")

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("HTTP –æ—à–∏–±–∫–∞: %d", resp.StatusCode)
	}

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTF-8
	utf8Reader, err := charset.NewReader(resp.Body, resp.Header.Get("Content-Type"))
	if err != nil {
		return nil, err
	}

	return goquery.NewDocumentFromReader(utf8Reader)
}

func findScheduleLink(doc *goquery.Document) (string, error) {
	// –ò—â–µ–º –í–°–ï —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
	var scheduleLink string
	doc.Find("a").Each(func(i int, s *goquery.Selection) {
		if strings.TrimSpace(s.Text()) == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" {
			href, exists := s.Attr("href")
			if exists {
				scheduleLink = href
			}
		}
	})

	if scheduleLink == "" {
		return "", fmt.Errorf("—Å—Å—ã–ª–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
	if strings.HasPrefix(scheduleLink, "/") {
		return baseURL + scheduleLink, nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
	_, err := url.ParseRequestURI(scheduleLink)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL: %v", err)
	}

	return scheduleLink, nil
}

func extractSchedule(doc *goquery.Document) (string, error) {
	content := doc.Find(schedule_selector)
	if content.Length() == 0 {
		return "", fmt.Errorf("–±–ª–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	html, err := content.Html()
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è HTML: %v", err)
	}

	return html, nil
}
